echo "# Learning_Javascript_Code" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M master
git remote add origin https://github.com/Thecodechronicles/Learning_Javascript_Code.git
git push -u origin master


Use 'touch .gitignore' after 'git init' to include files you want git to ignore before staging them.

For first push in the remote repo, git automatically creates a local 'master' branch 
by performing a 'git checkout -b <branchName>' for you. So 'git branch -M master' can be avoided. 
This command must be used when your local branch name is 'main' (some new git versions might change the default local branch name) 
and you want to rename your 'main' branch to 'master'. This would also overwrite any existing branch with the same name as 'master' 
(-M flag: --move --force)

Note: '-u' flag in 'git push -u origin master' is short for '--set-upstream' flag. When you push code for the first time to a new remote repo,
your local branch must have a tracking remote branch. -u automatically sets tracking to a remote/master branch from local master branch.
Thereafter, every pull and push from the current local branch will be tracking (in sync) the remote/branch  

Note: If pushing for the first time, you may have a 'Readme.md' file made on your remote repo(added by github on ask prompt) 
non existent on your local repo. This 'Readme.md' may therefore cause conflict in 'pushing to remote from local' 
as well as 'merging from remote to local' for the very first time. In this case you can use '--allow-unrelated-histories' 
flag which woud work with 'git pull' command resolving the conflict of 'unrelated histories' error 
Example usage: 'git pull origin <branchname> --allow-unrelated-histories'
SideNote: First make a pull add remote repo file on your local and then make the push(without any flag)

To checkout to a new_branch and merge all the changes made till the particular commit_hash
git checkout -b <new_branch> <commit_hash> 
Or, To checkout to a new_branch and merge all the changes made till 4 commits back from HEAD(go back 4 commits from HEAD)
git checkout -b new_branch HEAD~4
Note: 'git log' logs out all the information of commits.

To merely move your current branch to a particular commit to view the branch state till that commit
git checkout <commit_hash>

To checkout new local branch tracking a new remote branch after 'git fetch --all': 
git fetch --all
git branch -r
git checkout -b <local_branch_name> <origin/remote_branch_name>

when on current branch with some uncommitted changes:
git stash (from current branch, lets say: branch 1)
git checkout <branch_name> ( lets say: branch 2 )
git checkout <branch_name> (back to same branch: branch 1)
git stash pop or git stash apply (to again apply the uncommited changes to the working directory that you saved by 'git stash')

To see differences between two branches:
git diff <branchName/commitHash> <branchName/commitHash> Or
git diff <branchName/commitHash> <branchName/commitHash> <filename> (for a specific filename)
git diff HEAD <file_name>
git diff <remote-origin/branchName> (when on current branch and required to see difference with remote-branch; 
                                     probably after using 'git fetch --all')

To change a previous commit:
git rebase -i <commitHash>^ 
nano editor will appear edit the file sush as: replase 'pick' to 'edit' the commits you want to edit and 
save the file in nano editor
make the changes then, do this: git add ., git commit --amend
when satisfy with your changes do this: git rebase --continue
Git will replay the subsequent changes on top of your modified commit. You may be asked to fix some merge conflicts. 
(i.e there will be changes in the working tree, take assistance of gitlens to know better)


To create a tag for a git commit:
git tag -a [tag_name] [commit_SHA] -m "Notes about the tag" (Read more about lightweight tags and annotated tags)

To undo recent commit changes:
git reset HEAD~

To restore changes done by undoing commits eg: 'git reset HEAD~' 
git reflog
git reset --hard <sha1 of desired commit>
