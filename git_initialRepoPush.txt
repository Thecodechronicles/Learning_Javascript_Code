echo "# Learning_Javascript_Code" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M master
git remote add origin https://github.com/Thecodechronicles/Learning_Javascript_Code.git
git push -u origin master


Use 'touch .gitignore' after 'git init' to include files you want git to ignore before staging them.

For first push in the remote repo, git automatically creates a local 'master' branch 
and perform a 'git checkout -b <branchName>' for you. So 'git branch -M master' can be avoided. 
This command must be used when your local branch name is 'main' (some new git versions might change the default local branch name) 
and you want to rename your 'main' branch to 'master'. This would also overwrite any existing branch with the same name as 'master' 
(-M flag: --move --force)

Note: '-u' flag in 'git push -u origin master' is short for '--set-upstream' flag. When you push code for the first time to a new remote repo,
your local branch must have a tracking remote branch. -u automatically sets tracking to a remote/master branch from local master branch.
Thereafter, every pull and push from the current local branch will be tracking (in sync) the remote/branch  

Note: If pushing for the first time, you may have a 'Readme.md' file made on your remote repo(added by github on ask prompt) 
non existent on your local repo. This 'Readme.md' may therefore cause conflict in 'pushing to remote from local' 
as well as 'merging from remote to local' for the very first time. In this case you can use '--allow-unrelated-histories' 
flag which woud work with 'git pull' command resolving the conflict of 'unrelated histories' error 
Example usage: 'git pull origin branchname --allow-unrelated-histories'
SideNote: First make a pull add remote repo file on your local and then make the push(without any flag)